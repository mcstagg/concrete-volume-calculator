{"version":3,"sources":["truck.png","VerifyModal.js","ConfirmModal.js","App.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["VerifyModal","placedOrder","onConfirmClick","props","order","orderDate","dateOfPour","customer","time","timeOfPour","cubicYards","typeOfPour","temperature","slump","fiberMesh","chloride","address","specialInstructions","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Container","Row","Col","className","Footer","Button","onClick","onHide","ConfirmModal","orders","loading","onCloseClick","length","App","useState","width","setWidth","height","setHeight","setLength","setCubicYards","totalCubicYards","setTotalCubicYards","displayCubicYards","setDisplayCubicYards","entries","setEntries","setOrderDate","setDateOfPour","setCustomer","setTimeOfPour","setTypeOfPour","setTemperature","setSlump","setFiberMesh","setChloride","setAddress","setSpecialInstructions","setPlacedOrder","modalShow","setModalShow","confirmModalShow","setConfirmModalShow","setOrders","setLoading","calculateTotalCubicYards","volume","total","totalVolume","fixedVolume","Number","toFixed","sendOrders","a","requestOptions","headers","body","API","post","data","console","log","error","useEffect","fetchOrders","get","src","truck","alt","type","name","value","onChange","e","target","htmlFor","Form","Group","Label","Control","placeholder","variant","concat","addDimension","map","entry","index","as","onInput","rows","addOrder","show","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d12291c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/truck.96454da8.png\";","import { react, useState, useEffect } from 'react';\r\nimport { API } from 'aws-amplify';\r\nimport BModal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nconst VerifyModal = ({placedOrder, onConfirmClick, ...props}) => {\r\n\r\n    let order = placedOrder;\r\n\r\n    let orderDate = order.orderDate;\r\n    let dateOfPour = order.dateOfPour;\r\n    let customer = order.customer;\r\n    let time = order.timeOfPour;\r\n    let cubicYards = order.cubicYards;\r\n    let typeOfPour = order.typeOfPour;\r\n    let temperature = order.temperature;\r\n    let slump = order.slump;\r\n    let fiberMesh = order.fiberMesh;\r\n    let chloride = order.chloride;\r\n    let address = order.address;\r\n    let specialInstructions = order.specialInstructions;\r\n\r\n    return (\r\n      <BModal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <BModal.Header closeButton>\r\n          <BModal.Title id=\"contained-modal-title-vcenter\">\r\n            Confirm Your Order Details...\r\n          </BModal.Title>\r\n        </BModal.Header>\r\n        <BModal.Body>\r\n          <Container>\r\n          <Row>\r\n          <Col className=\"block-example border border-dark pl-3 pt-2\">\r\n          {\r\n            <>\r\n            <p><b>OrderDate: </b>{orderDate}</p>\r\n            <p><b>Date of Pour: </b>{dateOfPour}</p>\r\n            <p><b>Customer: </b>{customer}</p>\r\n            <p><b>Time of Pour: </b>{time}</p>\r\n            <p><b>Cubic Yards: </b>{cubicYards}</p>\r\n            <p><b>Type Of Pour: </b>{typeOfPour}</p>\r\n            <p><b>Temperature: </b>{temperature}</p>\r\n            <p><b>Slump: </b>{slump}</p>\r\n            <p><b>Fiber Mesh: </b>{fiberMesh}</p>\r\n            <p><b>Chloride: </b>{chloride}</p>\r\n            <p><b>Address: </b>{address}</p>\r\n            <p><b>Special Instructions: </b>{specialInstructions}</p>\r\n            </>\r\n          }\r\n          </Col>\r\n          </Row>\r\n          </Container>\r\n        </BModal.Body>\r\n        <BModal.Footer>\r\n          <Button onClick={props.onHide}>Edit Order</Button>\r\n          <Button onClick={onConfirmClick}>Confirm Order</Button>\r\n        </BModal.Footer>\r\n      </BModal>\r\n    );\r\n  }\r\n\r\n  export default VerifyModal;","import BModal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\nconst ConfirmModal = ({orders, loading, onCloseClick, ...props}) => {\r\n\r\n    let order = orders[orders.length - 1];\r\n\r\n    return (\r\n      <BModal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <BModal.Header closeButton>\r\n          <BModal.Title id=\"contained-modal-title-vcenter\">\r\n            Order Status...\r\n          </BModal.Title>\r\n        </BModal.Header>\r\n        <BModal.Body>\r\n          <Container>\r\n          <Row>\r\n          <Col className=\"block-example border border-dark pl-3 pt-2\">\r\n          \r\n          <Row className=\"\">\r\n          <Col>\r\n          {loading && <h2>Loading...</h2>}\r\n          {\r\n            !loading && order && \r\n            (\r\n              <div>\r\n                <p><b>Order Status: </b>Confirmed!</p>\r\n                <p><b>Order Date: </b>{order.orderDate}</p>\r\n                <p><b>Date of Pour: </b>{order.dateOfPour}</p>\r\n                <p><b>Customer: </b>{order.customer}</p>\r\n                <p><b>Driver Name: </b>John</p>\r\n                <p><b>Time of Pour: </b>{order.timeOfPour}</p>\r\n                <p><b>Cubic Yards: </b>{order.cubicYards}</p>\r\n                <p><b>Type of Pour: </b>{order.typeOfPour}</p>\r\n                <p><b>Temperature: </b>{order.temperature}</p>\r\n                <p><b>Slump: </b>{order.slump}</p>\r\n                <p><b>Fiber Mesh: </b>{order.fiberMesh}</p>\r\n                <p><b>Chloride: </b>{order.chloride}</p>\r\n                <p><b>Address: </b>{order.address}</p>\r\n                <p><b>Special Instructions: </b>{order.specialInstructions}</p>\r\n              </div>\r\n            )\r\n          }\r\n          </Col>\r\n          </Row>\r\n\r\n          </Col>\r\n          </Row>\r\n          </Container>\r\n        </BModal.Body>\r\n        <BModal.Footer>\r\n          <Button onClick={onCloseClick}>Close</Button>\r\n        </BModal.Footer>\r\n      </BModal>\r\n    );\r\n  }\r\n\r\n  export default ConfirmModal;","import React, { useState, useEffect } from 'react';\nimport { API } from 'aws-amplify';\nimport './App.css';\nimport truck from './truck.png';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport VerifyModal from './VerifyModal';\nimport ConfirmModal from './ConfirmModal';\nimport { Row, Col, Container, Form, Button } from 'react-bootstrap';\n\nconst App = () => {\n\n  // Dimension variables\n  const [width, setWidth] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [length, setLength] = useState(\"\");\n  const [cubicYards, setCubicYards] = useState(0);\n  const [totalCubicYards, setTotalCubicYards] = useState(0);\n  const [displayCubicYards, setDisplayCubicYards] = useState(0);\n  const [entries, setEntries] = useState([]);\n\n  // Order form variables\n  const [orderDate, setOrderDate] = useState(\"\");\n  const [dateOfPour, setDateOfPour] = useState(\"\");\n  const [customer, setCustomer] = useState(\"\");\n  const [timeOfPour, setTimeOfPour] = useState(\"\");\n  const [typeOfPour, setTypeOfPour] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"60\");\n  const [slump, setSlump] = useState(\"1 in\");\n  const [fiberMesh, setFiberMesh] = useState(\"No\");\n  const [chloride, setChloride] = useState(\"0%\");\n  const [address, setAddress] = useState(\"\");\n  const [specialInstructions, setSpecialInstructions] = useState(\"\");\n  const [placedOrder, setPlacedOrder] = useState({});\n  const [modalShow, setModalShow] = useState(false);\n  const [confirmModalShow, setConfirmModalShow] = useState(false);\n\n  // Confirmation variables\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  let order;\n\n  // Dimension and display logic\n  // Handles the add dimension event upon add new dimension button click\n  const addDimension = (width, height, length) => {\n\n    let heightInInches = height * 12;\n    let lengthInInches = length * 12;\n    let cubicInches = width * heightInInches * lengthInInches;\n    let inchesInYards = 46656;\n    let volume = (cubicInches / inchesInYards)\n    calculateTotalCubicYards(volume);\n    setCubicYards(Number(volume.toFixed(2))); \n\n    setEntries(\n      entries.concat({\n        width: width,\n        height: height,\n        length: length,\n        cubicYards: volume.toFixed(2)\n      })\n    );\n  };\n\n  const clearDimensions = () => {\n    setEntries(\n      entries.concat({})\n    )\n  }\n\n  const calculateTotalCubicYards = (volume) => {\n    let total = totalCubicYards;\n    let totalVolume = (total += volume);\n    let fixedVolume = Number(totalVolume.toFixed(2));\n    setTotalCubicYards(fixedVolume);\n    setDisplayCubicYards(fixedVolume); \n  }\n\n  // Order and display logic\n  const addOrder = () => {\n\n    setPlacedOrder(\n      {\n        orderDate: orderDate,\n        dateOfPour: dateOfPour,\n        customer: customer,\n        timeOfPour: timeOfPour,\n        cubicYards: displayCubicYards,\n        typeOfPour: typeOfPour,\n        temperature: temperature,\n        slump: slump,\n        fiberMesh: fiberMesh,\n        chloride: chloride,\n        dateOfPour: dateOfPour,\n        address: address,\n        specialInstructions: specialInstructions\n      }\n    );\n  };\n\n  const sendOrders = async () => {\n\n    const requestOptions = {\n      headers: { \n        'Content-Type': 'application/json'\n      },\n      body: placedOrder\n    };\n\n    try {\n      const data = await API.post('cvcorderapi', `/cvcorder`, requestOptions);\n      console.log(data);\n    } \n    catch (err) {\n      console.error(err);\n    };\n  };\n\n  // Call fetchOrders function when component loads\n  useEffect(() => {\n    // sendOrders()\n  }, [])\n\n  const fetchOrders = async () => {\n\n    try {\n      setLoading(true);\n      const data = await API.get('cvcorderapi', `/cvcorder`);\n      setOrders(data.orders);\n      setLoading(false);\n    }\n    catch (err) {\n      console.error(err);\n    };\n  };\n\n  const showVerifyModal = () => {\n    setModalShow(true);\n  }\n\n  const onConfirmClick = async () => {\n    setPlacedOrder(\n      {\n        orderDate: orderDate,\n        dateOfPour: dateOfPour,\n        customer: customer,\n        timeOfPour: timeOfPour,\n        cubicYards: displayCubicYards,\n        typeOfPour: typeOfPour,\n        temperature: temperature,\n        slump: slump,\n        fiberMesh: fiberMesh,\n        chloride: chloride,\n        dateOfPour: dateOfPour,\n        address: address,\n        specialInstructions: specialInstructions\n      }\n    );\n\n    setModalShow(false);\n    await sendOrders();\n    fetchOrders();\n    setConfirmModalShow(true);\n  }\n\n  const onCloseClick = () => {\n    setConfirmModalShow(false);\n  }\n\n  return (\n\n    <>\n      <Container>\n      <Row className=\"mb-2 mt-1\">\n        <Col>\n          <img \n            src={truck} \n            alt=\"truck\" \n          />\n        </Col>\n        <Col>\n          <h1 className=\"text-center\">\n            <u>Concrete Volume Calculator</u>\n          </h1>\n        </Col>\n      </Row>\n      \n      <div>\n        <h4 className=\"text-center\">\n          <i>Enter Your Details Below:</i>\n        </h4>\n        <Row className=\"pt-1\">\n        <Col>\n          <input \n            type=\"radio\" \n            id=\"wall\" \n            name=\"options\"\n            value=\"Wall\"\n            onChange={\n              e => setTypeOfPour(e.target.value)\n            }\n          />\n          <label \n            htmlFor=\"wall\" \n            className=\"pl-2\"\n          > \n            Wall\n          </label>\n        </Col>\n        <Col>\n          <input \n            type=\"radio\" \n            id=\"footing\" \n            name=\"options\"\n            value=\"Footing\"\n            onChange={\n              e => setTypeOfPour(e.target.value)\n            } \n          />\n          <label \n            htmlFor=\"footing\" \n            className=\"pl-2\"\n          > \n            Footing\n          </label>\n        </Col>\n        <Col>\n          <input \n            type=\"radio\" \n            id=\"patio\" \n            name=\"options\"\n            value=\"Floor\"\n            onChange={\n              e => setTypeOfPour(e.target.value)\n            } \n          />\n          <label \n            htmlFor=\"patio\" \n            className=\"pl-2\"\n          >\n            Floor\n          </label>\n        </Col>\n        <Col>\n          <input \n            type=\"radio\" \n            id=\"patio\" \n            name=\"options\"\n            value=\"Patio\"\n            onChange={\n              e => setTypeOfPour(e.target.value)\n            } \n          />\n          <label \n            htmlFor=\"sidewalk\" \n            className=\"pl-2\"\n          >\n            Patio\n          </label></Col>\n        </Row>\n      </div>\n\n      <div>\n          <h4>New Dimension:</h4>\n          <Row \n            className=\"mb-0 pr-2 pt-2 pb-3 block-example border border-dark text-center\"\n          >\n            <Col className=\"mb-0\">\n              <Form.Group className=\"mb-0\">\n                <Form.Label \n                  htmlFor=\"width\" \n                  className=\"pr-2\"\n                >\n                  <b>Width (in.)</b>\n                </Form.Label>\n                <Form.Control \n                  type=\"text\" \n                  id=\"width\" \n                  placeholder=\"width\"\n                  value={width} \n                  onChange={\n                    e => setWidth(e.target.value)\n                  }\n                />\n              </Form.Group>\n            </Col>\n            <Col className=\"mb-0\">\n              <Form.Group className=\"mb-0\">\n                <Form.Label \n                  htmlFor=\"height\" \n                  className=\"pr-2\"\n                >\n                  <b>Height (ft.)</b>\n                </Form.Label>\n                <Form.Control \n                  type=\"text\" \n                  id=\"height\" \n                  placeholder=\"Height\"\n                  value={height} \n                  onChange={\n                    e => setHeight(e.target.value)\n                  } \n                />\n              </Form.Group>\n            </ Col>\n            <Col className=\"mb-0\">\n              <Form.Group className=\"mb-0\">\n                <Form.Label \n                  htmlFor=\"length\" \n                  className=\"pr-2\"\n                >\n                  <b>Length (ft.)</b>\n                </Form.Label>\n                <Form.Control \n                  type=\"text\" \n                  id=\"length\" \n                  placeholder=\"length\"\n                  value={length} \n                  onChange={\n                    e => setLength(e.target.value)\n                  }  \n                />\n              </Form.Group>\n            </ Col>\n          </Row>\n      </div>\n\n      <Row className=\"\">\n        <Col>\n          <h4 className=\"mt-3\">Entries:</h4>\n        </Col>\n        <Col className=\"pr-0\">\n          <Button \n            variant=\"primary\" \n            size=\"m\" \n            className=\"float-right mt-2 mb-2\"\n            onClick={\n              () => {\n                addDimension(width, height, length);\n              }\n            }\n          >\n            Enter New Dimension\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"block-example border border-dark\">\n        <Col className=\"mb-3 mt-3\">\n          {\n            entries.map(\n              (entry, index) => (\n                <span key={index}>\n                  <b>{entry.width}</b> in. wide by&nbsp;\n                  <b>{entry.height}</b> ft. high by&nbsp;\n                  <b>{entry.length}</b> ft. long =&nbsp;\n                  <b>{entry.cubicYards}</b> cubic yards\n                  <br />\n                </span>\n              )\n            )\n          }\n        </Col>\n      </Row>\n      <Row \n        className=\"pt-3 mb-3 block-example border-left border-right border-bottom border-dark\"\n      >\n        <Col>\n          <p><b>Total Cubic Yards:</b></p>\n        </Col>\n        <Col>\n          <p className=\"float-right\">\n          <b>\n            {\n              totalCubicYards\n            }\n          </b>\n          </p>\n        </Col>\n      </Row>\n\n      <div className=\"\">\n      <Row>\n        <Col>\n          <h4 className=\"mb-2\">Order Form:</h4>\n        </Col>\n      </Row>\n\n      <Row className=\"pt-3 pb-1 mb-3 block-example border border-dark\">\n        <Col>\n          <Form.Group>\n          <Col>\n          <Row className=\"mx-auto\">\n            <Col className=\"mb-0\">\n              <Form.Label htmlFor=\"date\">\n                <b>Order Date:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"date\" \n                id=\"date\" \n                name=\"dates\" \n                placeholder=\"MM/DD/YY\"\n                onChange={\n                  e => setOrderDate(e.target.value)\n                }\n              />\n            </Col>\n            <Col> \n              <Form.Label htmlFor=\"pourDate\">\n                <b>Date of Pour:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"date\" \n                id=\"pour\" \n                name=\"pourDate\" \n                placeholder=\"MM/DD/YY\"\n                onChange={\n                  e => setDateOfPour(e.target.value)\n                } \n              />\n            </Col>\n          </Row>\n          <Row className=\"mx-auto\">\n            <Col>\n              <Form.Label htmlFor=\"customer\">\n                <b>Customer:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"text\" \n                id=\"customer\" \n                name=\"customers\" \n                placeholder=\"customer\"\n                onChange={\n                  e => setCustomer(e.target.value)\n                } \n              />\n            </Col>\n            <Col> \n              <Form.Label htmlFor=\"timeOfPour\">\n                <b>Time of Pour:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"time\" \n                id=\"time\" \n                name=\"timeOfPour\" \n                placeholder=\"12:00pm\"\n                onChange={\n                  e => setTimeOfPour(e.target.value)\n                } \n              />\n            </Col>\n          </Row>\n          <Row className=\"mx-auto\">\n          <Col>\n              <Form.Label htmlFor=\"yards\">\n                <b>Cubic Yards:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"text\" \n                id=\"yards\" \n                name=\"cubicyards\" \n                placeholder=\"0.00\"\n                value={displayCubicYards}\n                onChange={\n                  e => setDisplayCubicYards(e.target.value)\n                }\n              />\n            </Col> \n            <Col>\n              <Form.Label htmlFor=\"type\">\n                <b>Type of Pour:</b>\n              </Form.Label>\n              <Form.Control \n                type=\"text\" \n                id=\"type\" \n                name=\"types\"\n                value={typeOfPour} \n                placeholder=\"type of pour\"\n                onChange={\n                  e => setTypeOfPour(e.target.value)\n                }\n              />\n            </Col>\n          </Row>\n          <Row className=\"mx-auto\">\n            <Col>\n            <Form.Label htmlFor=\"temp\">\n              <b>Temperature: (F)</b>\n            </Form.Label>\n            <Form.Control \n              as=\"select\" \n              id=\"temp\" \n              name=\"temperature\" \n              placeholder=\"temp\"\n              onInput={\n                e => setTemperature(e.target.value)\n              } \n            >\n              <option>60</option>\n              <option>65</option>\n              <option>70</option>\n              <option>75</option>\n              <option>80</option>\n            </Form.Control>\n            </Col>\n            <Col>\n              <Form.Label htmlFor=\"slump\">\n                <b>Slump:</b>\n              </Form.Label>\n              <Form.Control \n                as=\"select\" \n                id=\"slump\" \n                name=\"slumpin\" \n                placeholder=\"slump\"\n                onChange={\n                  e => setSlump(e.target.value)\n                } \n              >\n                <option>1 in</option>\n                <option>2 in</option>\n                <option>3 in</option>\n                <option>4 in</option>\n                <option>5 in</option>\n              </Form.Control>\n            </Col>\n          </Row> \n          <Row className=\"mx-auto\">\n            <Col>\n              <Form.Label htmlFor=\"fiber\">\n                <b>Fiber Mesh:</b>\n              </Form.Label>\n              <Form.Control \n                as=\"select\" \n                id=\"fiber\" \n                name=\"fibermesh\" \n                placeholder=\"fiber mesh\"\n                onChange={\n                  e => setFiberMesh(e.target.value)\n                } \n              >\n                <option>No</option>\n                <option>Yes</option>\n              </Form.Control>\n            </Col>\n            <Col>\n              <Form.Label htmlFor=\"chloride\">\n                <b>Chloride:</b>\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                id=\"chloride\" \n                name=\"chloridecontent\" \n                placeholder=\"chloride\"\n                onChange={\n                  e => setChloride(e.target.value)\n                }\n              > \n                <option>0%</option>\n                <option>1%</option>\n                <option>2%</option>\n                <option>3%</option>\n              </Form.Control>   \n            </Col>\n          </Row>\n          <Row className=\"mx-auto\">\n            <Col>    \n              <Form.Label htmlFor=\"address\">\n                <b>Job Site Address:</b>\n              </Form.Label>\n              <Form.Control \n                as=\"textarea\" \n                rows={3} \n                type=\"text\" \n                id=\"address\" \n                name=\"jobAddress\" \n                placeholder=\"address\"\n                onChange={\n                  e => setAddress(e.target.value)\n                } \n              />\n            </Col>\n          </Row> \n          <Row className=\"mx-auto\">\n            <Col>   \n              <Form.Label htmlFor=\"special\">\n                <b>Special Instructions:</b>\n              </Form.Label>\n              <Form.Control \n                as=\"textarea\" \n                rows={3} \n                type=\"text\" \n                id=\"special\" \n                name=\"specialinstructions\" \n                placeholder=\"special instructions\"\n                onChange={\n                  e => setSpecialInstructions(e.target.value)\n                } \n              />\n            </Col> \n          </Row>  \n            <Button \n              variant=\"primary\" \n              size=\"m\" \n              className=\"float-right mb-3 mt-3 mr-3 pl-5 pr-5\"\n              onClick={\n                () => {\n                  addOrder();\n                  showVerifyModal();\n                }\n              }\n            >\n              Place Your Order\n            </Button>\n          </Col>\n          </Form.Group>\n        </Col>\n      </Row>\n      </div>\n\n      <VerifyModal \n        show={modalShow} \n        onHide={\n          () => setModalShow(false)\n        }\n        placedOrder={placedOrder}\n        orders={orders}\n        onConfirmClick={onConfirmClick}\n      />\n\n      <ConfirmModal \n        show={confirmModalShow} \n        orders={orders}\n        loading={loading}\n        onHide={\n          () => setConfirmModalShow(false)\n        }\n        onCloseClick={onCloseClick}\n      />\n    \n      <Row className=\"\">\n        <Col>\n          {/* <h3 className=\"mb-3\">Your Order Has Been Confirmed!</h3> */}\n          {/* {\n            orders.map((order, index) => (\n              <div key={index}>\n                <p><b>{order.name}</b> {order.symbol}</p>\n              </div>\n            ))\n          } */}\n        </Col>\n      </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"cvcorderapi\",\n            \"endpoint\": \"https://36gjztimm1.execute-api.us-east-2.amazonaws.com/local\",\n            \"region\": \"us-east-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config);\n\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}